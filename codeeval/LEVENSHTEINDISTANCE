#! /usr/bin/python

import sys
import collections

def read_input():
    with open(sys.argv[1]) as input_file:
        return list(input_file)


def levenshtein(a,b):
    "Calculates the Levenshtein distance between a and b."
    "http://hetland.org/coding/python/levenshtein.py"
    n, m = len(a), len(b)
    if n > m:
        # Make sure n <= m, to use O(min(n,m)) space
        a,b = b,a
        n,m = m,n
        
    current = range(n+1)
    for i in range(1,m+1):
        previous, current = current, [i]+[0]*n
        for j in range(1,n+1):
            add, delete = previous[j]+1, current[j-1]+1
            change = previous[j-1]
            if a[j-1] != b[i-1]:
                change = change + 1
            current[j] = min(add, delete, change)
            
    return current[n]

def compute_friends(words):
    friends = collections.DefaultDict(set)
    for a in words:
        for b in words:
            if levenshtein(a,b) == 1:
                friends[a] += b
    return friends


def compute_output(words):
    friends = compute_friends(words)
    network = compute_network(friends)
    return network

def main():
    words = read_input()
    networks = compute_output(words)
    for word in words:
        print len(networks[word])
    

if __name__=="__main__":
    from sys import argv
    print levenshtein(argv[1],argv[2])
